// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    // State variables
    string public tokenName = "Keith";
    string public tokenAbbrv = "Christian";
    uint256 public totalSupply;
    mapping(address => uint256) public balance;

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    // Constructor
    constructor() {
        // Initial supply is 0
        totalSupply = 0;
    }

    // Mint tokens and assign to an address
    function mint(address _to, uint256 _value) public {
        totalSupply += _value;
        balance[_to] += _value;
        emit Mint(_to, _value);
        emit Transfer(address(0), _to, _value);
    }

    // Burn tokens from a specific address
    function burn(address _from, uint256 _value) public {
        require(balance[_from] >= _value, "Insufficient balance");
        totalSupply -= _value;
        balance[_from] -= _value;
        emit Burn(_from, _value);
        emit Transfer(_from, address(0), _value);
    }

    // Transfer tokens from sender to another address
    function transfer(address _to, uint256 _value) public {
        require(balance[msg.sender] >= _value, "Insufficient balance");
        balance[msg.sender] -= _value;
        balance[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }

    // Get the balance of an address
    function balanceOf(address _owner) public view returns (uint256) {
        return balance[_owner];
    }
}
